{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732614675339}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Логунов Егор Викторович"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","    def __init__(self, name, base_salary):\n","        self.name = name\n","        self.base_salary = base_salary\n","\n","    def calculate_salary(self):\n","        return self.base_salary\n","\n","\n","class Manager(Employee):\n","    def __init__(self, name, base_salary, bonus):\n","        super().__init__(name, base_salary)\n","        self.bonus = bonus\n","\n","    def calculate_salary(self):\n","        return self.base_salary + self.bonus\n","\n","\n","class Developer(Employee):\n","    def __init__(self, name, base_salary, hours_worked):\n","        super().__init__(name, base_salary)\n","        self.hours_worked = hours_worked\n","\n","    def calculate_salary(self):\n","        overtime_pay = 0\n","        if self.hours_worked > 160:\n","            overtime_hours = self.hours_worked - 160\n","            overtime_pay = overtime_hours * (self.base_salary / 160)\n","        return self.base_salary + overtime_pay\n","\n","\n","employee = Employee('Александр', 5000)\n","manager = Manager('Борис', 5000, 2000)\n","developer = Developer('Вячеслав', 5000, 240)\n","\n","\n","print(f'Зарплата сотрудника по имени {employee.name}: {employee.calculate_salary()}')\n","print(f'Зарплата менеджера по имени {manager.name}: {manager.calculate_salary()}')\n","print(f'Зарплата разработчика имени {developer.name}: {developer.calculate_salary()}')\n"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732616484985,"user_tz":-300,"elapsed":574,"user":{"displayName":"gokuu no_main","userId":"15875348424582677757"}},"outputId":"3ad47f9b-8a2a-48f1-b3ad-f718b69e3355"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата сотрудника по имени Александр: 5000\n","Зарплата менеджера по имени Борис: 7000\n","Зарплата разработчика имени Вячеслав: 7500.0\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["# Создание родительского класса\n","class Vehicle:\n","    def __init__(self, brand, model):\n","        self.brand = brand\n","        self.model = model\n","\n","    def description(self):\n","        return f\"Это транспортное средство - {self.brand} {self.model}. \"\n","\n","\n","# Создание первого дочернего класса (Автомобиль)\n","class Car(Vehicle):\n","    def __init__(self, brand, model, num_doors):\n","        super().__init__(brand, model)\n","        self.num_doors = num_doors\n","\n","    def description(self):\n","        return f\"{super().description()} Это автомобиль с {self.num_doors} дверями.\"\n","\n","\n","# Создание второго дочернего класса (Грузовик)\n","class Truck(Vehicle):\n","    def __init__(self, brand, model, payload_capacity):\n","        super().__init__(brand, model)\n","        self.payload_capacity = payload_capacity\n","\n","    def description(self):\n","        return f\"{super().description()} Это грузовик с грузоподъёмностью {self.payload_capacity}.\"\n","\n","\n","# Создание третьего дочернего класса (Велосипед)\n","class Bike(Vehicle):\n","    def __init__(self, brand, model, num_gears):\n","        super().__init__(brand, model)\n","        self.num_gears = num_gears\n","\n","    def description(self):\n","        return f\"{super().description()} Это велосипед с {self.num_gears} передачами.\"\n","\n","\n","# Создание объектов транспортных средств\n","car = Car(\"Honda\", \"Accord\", 4)\n","truck = Truck(\"Ford\", \"F-150\", 2.5)\n","bike = Bike(\"Specialized\", \"Roubaix\", 22)\n","\n","\n","# Вызов метода description для каждого объекта\n","print(car.description())\n","print(truck.description())\n","print(bike.description())\n","\n","\n"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732620026516,"user_tz":-300,"elapsed":246,"user":{"displayName":"gokuu no_main","userId":"15875348424582677757"}},"outputId":"9437f612-c64e-4d3b-c82f-d70682440586"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Это транспортное средство - Honda Accord.  Это автомобиль с 4 дверями.\n","Это транспортное средство - Ford F-150.  Это грузовик с грузоподъёмностью 2.5.\n","Это транспортное средство - Specialized Roubaix.  Это велосипед с 22 передачами.\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["# Класс Product содержит информацию о продукте\n","class Product:\n","    def __init__(self, name, price, category, stock):\n","        self.name = name\n","        self.price = price\n","        self.category = category\n","        self.stock = stock\n","\n","    def __str__(self):\n","        return f\"{self.name} ({self.category}): {self.price} руб., {self.stock} шт. на складе\"\n","\n","\n","# Класс Order обрабатывает процесс покупки\n","class Order:\n","    def __init__(self, customer, cart, tax_rate=0.08, discount=0):\n","        self.customer = customer\n","        self.cart = cart\n","        self.tax_rate = tax_rate\n","        self.discount = discount\n","\n","    def calculate_total(self):\n","        subtotal = sum(item.product.price * item.quantity for item in self.cart.items)\n","        discount_amount = subtotal * self.discount\n","        tax_amount = (subtotal - discount_amount) * self.tax_rate\n","        total = subtotal - discount_amount + tax_amount\n","        return total\n","\n","    def __str__(self):\n","        items = \"\\n\".join(f\"{item.quantity} x {item.product.name}: {item.quantity * item.product.price} руб.\" for item in self.cart.items)\n","        total = self.calculate_total()\n","        return f\"\\nЗаказ для {self.customer.name}\\nТовары:\\n{items}\\nИтого: {total:.2f} руб.\"\n","\n","\n","# Класс Customer управляет информацией о пользователе и его историей заказов\n","class Customer:\n","    def __init__(self, name, email):\n","        self.name = name\n","        self.email = email\n","        self.orders = []\n","\n","    def place_order(self, cart, tax_rate, discount):\n","        order = Order(self, cart, tax_rate, discount)\n","        self.orders.append(order)\n","        print(f\"\\nЗаказ для {self.name} оформлен: {order}\")\n","\n","\n","# Класс CartItem представляет единицу товара в корзине с количеством\n","class CartItem:\n","    def __init__(self, product, quantity):\n","        self.product = product\n","        self.quantity = quantity\n","\n","\n","# Класс ShoppingCart позволяет добавлять, удалять и обновлять количество товаров в корзине\n","class ShoppingCart:\n","    def __init__(self):\n","        self.items = []\n","\n","    def add_item(self, product, quantity):\n","        item = next((item for item in self.items if item.product == product), None)\n","        if item:\n","            item.quantity += quantity\n","        else:\n","            self.items.append(CartItem(product, quantity))\n","\n","    def remove_item(self, product):\n","        self.items = [item for item in self.items if item.product != product]\n","\n","    def update_quantity(self, product, quantity):\n","        item = next((item for item in self.items if item.product == product), None)\n","        if item:\n","            item.quantity = quantity\n","\n","    def __str__(self):\n","        items = \"\\n\".join(f\"{item.quantity} x {item.product.name}\" for item in self.items)\n","        return f\"Корзина:\\n{items}\"\n","\n","\n","# Пользовательский интерфейс\n","def main():\n","    # Создание некоторых продуктов\n","    product1 = Product(\"Рубашка\", 1999, \"Одежда\", 100)\n","    product2 = Product(\"Брюки\", 2999, \"Одежда\", 50)\n","    product3 = Product(\"Ноутбук\", 79999, \"Электроника\", 20)\n","\n","    # Создание покупателя\n","    customer_name = input(\"Введите ваше имя: \")\n","    customer_email = input(\"Введите ваш email: \")\n","    customer = Customer(customer_name, customer_email)\n","\n","    # Создание корзины и добавление товаров\n","    cart = ShoppingCart()\n","    while True:\n","        print(\"\\nДоступные товары:\")\n","        for product in [product1, product2, product3]:\n","            print(product)\n","\n","        choice = input(\"\\nВведите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: \")\n","        if choice == 'q':\n","            break\n","\n","        try:\n","            if choice == 'r':\n","                product_index = int(input(\"Введите номер товара для удаления: \")) - 1\n","                removed_product = [product1, product2, product3][product_index]\n","                cart.remove_item(removed_product)\n","                print(f\"{removed_product.name} удален из корзины.\")\n","            elif choice == 'u':\n","                product_index = int(input(\"Введите номер товара для обновления количества: \")) - 1\n","                updated_product = [product1, product2, product3][product_index]\n","                quantity = int(input(f\"Введите новое количество для {updated_product.name}: \"))\n","                cart.update_quantity(updated_product, quantity)\n","                print(f\"Количество {updated_product.name} обновлено до {quantity}.\")\n","            else:\n","                product_index = int(choice) - 1\n","                selected_product = [product1, product2, product3][product_index]\n","                quantity = int(input(f\"Введите количество {selected_product.name}: \"))\n","                cart.add_item(selected_product, quantity)\n","                print(f\"{quantity} x {selected_product.name} добавлено в корзину.\")\n","        except (ValueError, IndexError):\n","            print(\"Некорректный ввод. Попробуйте снова.\")\n","\n","    print(\"\\nСодержимое корзины:\")\n","    print(cart)\n","\n","    # Оформление заказа\n","    tax_rate = float(input(\"\\nВведите налоговую ставку (например, 0.08 для 8%): \"))\n","    discount = float(input(\"Введите скидку (например, 0.1 для 10%): \"))\n","    customer.place_order(cart, tax_rate, discount)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733037303204,"user_tz":-300,"elapsed":105676,"user":{"displayName":"gokuu no_main","userId":"15875348424582677757"}},"outputId":"10978e5f-522a-40c4-fe0d-13a174479229"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ваше имя: Егор\n","Введите ваш email: anonimova18@gmail.com\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: 1\n","Введите количество Рубашка: 10\n","10 x Рубашка добавлено в корзину.\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: 2\n","Введите количество Брюки: 3\n","3 x Брюки добавлено в корзину.\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: u\n","Введите номер товара для обновления количества: 2\n","Введите новое количество для Брюки: 5\n","Количество Брюки обновлено до 5.\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: r\n","Введите номер товара для удаления: 2\n","Брюки удален из корзины.\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: 3\n","Введите количество Ноутбук: 1\n","1 x Ноутбук добавлено в корзину.\n","\n","Доступные товары:\n","Рубашка (Одежда): 1999 руб., 100 шт. на складе\n","Брюки (Одежда): 2999 руб., 50 шт. на складе\n","Ноутбук (Электроника): 79999 руб., 20 шт. на складе\n","\n","Введите номер товара (1-3) для добавления, 'r' для удаления, 'u' для обновления количества, или 'q' для выхода: q\n","\n","Содержимое корзины:\n","Корзина:\n","10 x Рубашка\n","1 x Ноутбук\n","Введите налоговую ставку (например, 0.08 для 8%): 0.08\n","Введите скидку (например, 0.1 для 10%): 0.1\n","\n","Заказ для Егор оформлен: \n","Заказ для Егор\n","Товары:\n","10 x Рубашка: 19990 руб.\n","1 x Ноутбук: 79999 руб.\n","Итого: 97189.31 руб.\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["# Класс SpaceShip с атрибутами для управления топливом, состоянием корпуса, и текущей скоростью.\n","class SpaceShip:\n","    def __init__(self):\n","        self.fuel = 100  # Топливо в процентах\n","        self.hull_condition = 100  # Состояние корпуса в процентах\n","        self.current_speed = 0  # Текущая скорость корабля\n","\n","    def check_status(self):\n","        print(f'Топливо: {self.fuel}%')\n","        print(f'Состояние корпуса: {self.hull_condition}%')\n","        print(f'Текущая скорость: {self.current_speed} м/с')\n","\n","    def accelerate(self, amount):\n","        if self.fuel > 0:\n","            self.current_speed += amount\n","            self.fuel -= amount * 0.1  # Уменьшаем топливо\n","            print(f'Ускорение на {amount} м/с. Новая скорость: {self.current_speed} м/с')\n","        else:\n","            print('Недостаточно топлива!')\n","\n","    def decelerate(self, amount):\n","        self.current_speed = max(0, self.current_speed - amount)  # Не даем скорости стать отрицательной\n","        print(f'Замедление на {amount} м/с. Новая скорость: {self.current_speed} м/с')\n","\n","\n","# Класс CrewMember для контроля здоровья, навыков, и ролей в команде\n","class CrewMember:\n","    def __init__(self, name, role):\n","        self.name = name  # Имя члена экипажа\n","        self.role = role  # Роль (например, пилот, инженер)\n","        self.health = 100  # Здоровье в процентах\n","        self.skills = {}  # Навыки в виде словаря (название навыка: уровень)\n","\n","    def add_skill(self, skill_name, level):\n","        self.skills[skill_name] = level  # Добавляем навык\n","        print(f'Навык {skill_name} добавлен с уровнем {level}.')\n","\n","    def check_health(self):\n","        print(f'{self.name} здоровье: {self.health}%')\n","\n","    def take_damage(self, amount):\n","        self.health = max(0, self.health - amount)  # Наносим урон\n","        print(f'{self.name} получил урон! Здоровье: {self.health}%')\n","\n","\n","# Класс Mission, определяющий цели, ресурсы, и возможные события\n","class Mission:\n","    def __init__(self, objectives):\n","        self.objectives = objectives  # Цели миссии\n","        self.resources = {}  # Ресурсы миссии\n","\n","    def add_resource(self, resource_name, amount):\n","        self.resources[resource_name] = amount  # Добавляем ресурс\n","        print(f'Ресурс {resource_name} добавлен в количестве {amount}.')\n","\n","    def list_objectives(self):\n","        print('Цели миссии:')\n","        for objective in self.objectives:\n","            print(f'- {objective}')\n","\n","    def encounter_event(self, event):\n","        print(f'Внимание! Произошло событие: {event}.')\n","\n","\n","# Пример использования симулятора\n","\n","# Создаем космический корабль\n","spaceship = SpaceShip()\n","\n","# Создаем членов экипажа\n","pilot = CrewMember(\"Иван\", \"Пилот\")\n","engineer = CrewMember(\"Алексей\", \"Инженер\")\n","\n","# Создаем миссию\n","mission = Mission([\"Исследовать планету X\", \"Собрать образцы\", \"Вернуться на Землю\"])\n","\n","# Проверяем статус корабля\n","spaceship.check_status()\n","\n","# Увеличиваем скорость и проверяем статус снова\n","spaceship.accelerate(20)\n","spaceship.check_status()\n","\n","# Проверяем здоровье пилота и инженера\n","pilot.check_health()\n","engineer.check_health()\n","\n","# Пилот получает урон и проверяет здоровье снова\n","pilot.take_damage(30)\n","pilot.check_health()\n","\n","# Добавляем ресурс к миссии и выводим цели миссии\n","mission.add_resource(\"Топливо\", 50)\n","mission.list_objectives()\n","\n","# Встречаем событие на миссии\n","mission.encounter_event(\"Авария двигателя\")"],"metadata":{"id":"4NyrOOy8B9ED","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733146656353,"user_tz":-300,"elapsed":864,"user":{"displayName":"gokuu no_main","userId":"15875348424582677757"}},"outputId":"8ea5dac3-1bb7-4e99-e6db-66acfce7e40e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Топливо: 100%\n","Состояние корпуса: 100%\n","Текущая скорость: 0 м/с\n","Ускорение на 20 м/с. Новая скорость: 20 м/с\n","Топливо: 98.0%\n","Состояние корпуса: 100%\n","Текущая скорость: 20 м/с\n","Иван здоровье: 100%\n","Алексей здоровье: 100%\n","Иван получил урон! Здоровье: 70%\n","Иван здоровье: 70%\n","Ресурс Топливо добавлен в количестве 50.\n","Цели миссии:\n","- Исследовать планету X\n","- Собрать образцы\n","- Вернуться на Землю\n","Внимание! Произошло событие: Авария двигателя.\n"]}]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":["class TicTacToe:\n","    def __init__(self):\n","        self.board = [' ' for _ in range(9)]  # Инициализация игрового поля\n","        self.current_player = 'X'  # Текущий игрок\n","\n","    def print_board(self):\n","        # Отображение игрового поля\n","        print(\"\\n\" + \"-\" * 13)\n","        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:\n","            print(\"| \" + \" | \".join(row) + \" |\")\n","        print(\"-\" * 13 + \"\\n\")\n","\n","    def is_valid_move(self, position):\n","        # Проверка допустимости хода\n","        return self.board[position] == ' '\n","\n","    def make_move(self, position):\n","        # Совершение хода\n","        if self.is_valid_move(position):\n","            self.board[position] = self.current_player\n","            self.current_player = 'O' if self.current_player == 'X' else 'X'\n","        else:\n","            print('Недопустимый ход!')\n","\n","    def check_winner(self):\n","        # Проверка победителя\n","        winning_combinations = [\n","            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Строки\n","            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Столбцы\n","            [0, 4, 8], [2, 4, 6]  # Диагонали\n","        ]\n","\n","        for combo in winning_combinations:\n","            if all(self.board[pos] == 'X' for pos in combo):\n","                return 'X'\n","            elif all(self.board[pos] == 'O' for pos in combo):\n","                return 'O'\n","\n","        if ' ' not in self.board:\n","            return 'Ничья'\n","\n","        return None\n","\n","def play_game():\n","    game = TicTacToe()\n","    print(\"Добро пожаловать в игру 'Крестики-нолики'!\")  # Приветственное сообщение\n","\n","    while True:\n","        game.print_board()\n","        winner = game.check_winner()\n","        if winner:\n","            print(f'Победитель: {winner}')\n","            break\n","\n","        position = int(input(f'Ход игрока {game.current_player} (0-8): '))\n","        game.make_move(position)\n","\n","play_game()"],"metadata":{"id":"x9OxpNsyCcUo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733082662300,"user_tz":-300,"elapsed":89813,"user":{"displayName":"gokuu no_main","userId":"15875348424582677757"}},"outputId":"e63207d5-1549-4e12-819e-aafe7e561857"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Добро пожаловать в игру 'Крестики-нолики'!\n","\n","-------------\n","|   |   |   |\n","|   |   |   |\n","|   |   |   |\n","-------------\n","\n","Ход игрока X (0-8): 0\n","\n","-------------\n","| X |   |   |\n","|   |   |   |\n","|   |   |   |\n","-------------\n","\n","Ход игрока O (0-8): 4\n","\n","-------------\n","| X |   |   |\n","|   | O |   |\n","|   |   |   |\n","-------------\n","\n","Ход игрока X (0-8): 3\n","\n","-------------\n","| X |   |   |\n","| X | O |   |\n","|   |   |   |\n","-------------\n","\n","Ход игрока O (0-8): 6\n","\n","-------------\n","| X |   |   |\n","| X | O |   |\n","| O |   |   |\n","-------------\n","\n","Ход игрока X (0-8): 2\n","\n","-------------\n","| X |   | X |\n","| X | O |   |\n","| O |   |   |\n","-------------\n","\n","Ход игрока O (0-8): 1\n","\n","-------------\n","| X | O | X |\n","| X | O |   |\n","| O |   |   |\n","-------------\n","\n","Ход игрока X (0-8): 7\n","\n","-------------\n","| X | O | X |\n","| X | O |   |\n","| O | X |   |\n","-------------\n","\n","Ход игрока O (0-8): 5\n","\n","-------------\n","| X | O | X |\n","| X | O | O |\n","| O | X |   |\n","-------------\n","\n","Ход игрока X (0-8): 8\n","\n","-------------\n","| X | O | X |\n","| X | O | O |\n","| O | X | X |\n","-------------\n","\n","Победитель: Ничья\n"]}]}]}